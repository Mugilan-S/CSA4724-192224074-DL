{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPIptxHV4cTNpMly8QI6M2m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mugilan-S/CSA4724-192224074-DL/blob/main/26.06.2024-DAY%205-DEEP%20LEARNING\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def estimate_coef(x, y):\n",
        "    # number of observations/points\n",
        "    n = np.size(x)\n",
        "\n",
        "    # mean of x and y vector\n",
        "    m_x = np.mean(x)\n",
        "    m_y = np.mean(y)\n",
        "\n",
        "    # calculating cross-deviation and deviation about x\n",
        "    SS_xy = np.sum(y*x) - n*m_y*m_x\n",
        "    SS_xx = np.sum(x*x) - n*m_x*m_x\n",
        "\n",
        "    # calculating regression coefficients\n",
        "    b_1 = SS_xy / SS_xx\n",
        "    b_0 = m_y - b_1*m_x\n",
        "\n",
        "    return (b_0, b_1)\n",
        "\n",
        "def plot_regression_line(x, y, b):\n",
        "    # plotting the actual points as scatter plot\n",
        "    plt.scatter(x, y, color = \"r\",\n",
        "               marker = \"o\", s = 30)\n",
        "\n",
        "    # predicted response vector\n",
        "    y_pred = b[0] + b[1]*x\n",
        "\n",
        "    # plotting the regression line\n",
        "    plt.plot(x, y_pred, color = \"b\")\n",
        "\n",
        "    # putting labels\n",
        "    plt.xlabel('x')\n",
        "    plt.ylabel('y')\n",
        "\n",
        "    # function to show plot\n",
        "    plt.show()\n",
        "\n",
        "def main():\n",
        "    # observations / data\n",
        "    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
        "    y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])\n",
        "\n",
        "    # estimating coefficients\n",
        "    b = estimate_coef(x, y)\n",
        "    print(\"Estimated coefficients:\\nb_0 = {}  \\\n",
        "          \\nb_1 = {}\".format(b[0], b[1]))\n",
        "\n",
        "    # plotting regression line\n",
        "    plot_regression_line(x, y, b)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "__rrex02X1ZF",
        "outputId": "7bda5dff-b1b3-4d3d-db03-d96807393a12"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimated coefficients:\n",
            "b_0 = 1.2363636363636363            \n",
            "b_1 = 1.1696969696969697\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.datasets import make_classification\n",
        "\n",
        "# Generate a synthetic binary classification dataset\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_informative=15, n_redundant=5, n_classes=2, random_state=42)\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# Define the model\n",
        "model = Sequential()\n",
        "model.add(Dense(32, input_dim=X_train.shape[1], activation='relu'))\n",
        "model.add(Dense(16, activation='relu'))\n",
        "model.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f'Test Accuracy: {accuracy:.4f}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G-9gZ6cZX7Lw",
        "outputId": "9cb2cb49-72e7-4e05-9807-fd5e2bb0fb48"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "20/20 [==============================] - 1s 15ms/step - loss: 0.7038 - accuracy: 0.5391 - val_loss: 0.6308 - val_accuracy: 0.6000\n",
            "Epoch 2/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.5897 - accuracy: 0.6984 - val_loss: 0.5511 - val_accuracy: 0.7625\n",
            "Epoch 3/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.5137 - accuracy: 0.8047 - val_loss: 0.4989 - val_accuracy: 0.7875\n",
            "Epoch 4/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4546 - accuracy: 0.8453 - val_loss: 0.4581 - val_accuracy: 0.8062\n",
            "Epoch 5/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.4052 - accuracy: 0.8656 - val_loss: 0.4249 - val_accuracy: 0.8250\n",
            "Epoch 6/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3642 - accuracy: 0.8766 - val_loss: 0.3986 - val_accuracy: 0.8188\n",
            "Epoch 7/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3263 - accuracy: 0.8938 - val_loss: 0.3724 - val_accuracy: 0.8375\n",
            "Epoch 8/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.2934 - accuracy: 0.9078 - val_loss: 0.3559 - val_accuracy: 0.8375\n",
            "Epoch 9/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.2650 - accuracy: 0.9125 - val_loss: 0.3368 - val_accuracy: 0.8500\n",
            "Epoch 10/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2414 - accuracy: 0.9219 - val_loss: 0.3244 - val_accuracy: 0.8625\n",
            "Epoch 11/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2213 - accuracy: 0.9297 - val_loss: 0.3151 - val_accuracy: 0.8625\n",
            "Epoch 12/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2039 - accuracy: 0.9375 - val_loss: 0.3066 - val_accuracy: 0.8813\n",
            "Epoch 13/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1886 - accuracy: 0.9422 - val_loss: 0.3000 - val_accuracy: 0.8750\n",
            "Epoch 14/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1770 - accuracy: 0.9453 - val_loss: 0.2879 - val_accuracy: 0.8938\n",
            "Epoch 15/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1643 - accuracy: 0.9500 - val_loss: 0.2828 - val_accuracy: 0.8875\n",
            "Epoch 16/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1532 - accuracy: 0.9578 - val_loss: 0.2786 - val_accuracy: 0.8938\n",
            "Epoch 17/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1436 - accuracy: 0.9547 - val_loss: 0.2732 - val_accuracy: 0.9000\n",
            "Epoch 18/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1349 - accuracy: 0.9609 - val_loss: 0.2738 - val_accuracy: 0.9000\n",
            "Epoch 19/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1284 - accuracy: 0.9609 - val_loss: 0.2597 - val_accuracy: 0.9062\n",
            "Epoch 20/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1204 - accuracy: 0.9672 - val_loss: 0.2672 - val_accuracy: 0.9062\n",
            "Epoch 21/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1134 - accuracy: 0.9703 - val_loss: 0.2615 - val_accuracy: 0.9000\n",
            "Epoch 22/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1085 - accuracy: 0.9688 - val_loss: 0.2630 - val_accuracy: 0.8938\n",
            "Epoch 23/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.1020 - accuracy: 0.9734 - val_loss: 0.2588 - val_accuracy: 0.9062\n",
            "Epoch 24/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0973 - accuracy: 0.9766 - val_loss: 0.2668 - val_accuracy: 0.9000\n",
            "Epoch 25/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0919 - accuracy: 0.9797 - val_loss: 0.2508 - val_accuracy: 0.9062\n",
            "Epoch 26/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0873 - accuracy: 0.9766 - val_loss: 0.2602 - val_accuracy: 0.9062\n",
            "Epoch 27/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0827 - accuracy: 0.9781 - val_loss: 0.2543 - val_accuracy: 0.9062\n",
            "Epoch 28/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0792 - accuracy: 0.9781 - val_loss: 0.2595 - val_accuracy: 0.9000\n",
            "Epoch 29/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0753 - accuracy: 0.9844 - val_loss: 0.2514 - val_accuracy: 0.9062\n",
            "Epoch 30/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0712 - accuracy: 0.9812 - val_loss: 0.2646 - val_accuracy: 0.9000\n",
            "Epoch 31/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0680 - accuracy: 0.9859 - val_loss: 0.2659 - val_accuracy: 0.9125\n",
            "Epoch 32/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0654 - accuracy: 0.9828 - val_loss: 0.2610 - val_accuracy: 0.9000\n",
            "Epoch 33/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0612 - accuracy: 0.9891 - val_loss: 0.2600 - val_accuracy: 0.9062\n",
            "Epoch 34/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0590 - accuracy: 0.9891 - val_loss: 0.2740 - val_accuracy: 0.9000\n",
            "Epoch 35/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0553 - accuracy: 0.9906 - val_loss: 0.2682 - val_accuracy: 0.9000\n",
            "Epoch 36/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0526 - accuracy: 0.9922 - val_loss: 0.2734 - val_accuracy: 0.9000\n",
            "Epoch 37/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0507 - accuracy: 0.9922 - val_loss: 0.2689 - val_accuracy: 0.9000\n",
            "Epoch 38/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0479 - accuracy: 0.9937 - val_loss: 0.2780 - val_accuracy: 0.9000\n",
            "Epoch 39/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0464 - accuracy: 0.9937 - val_loss: 0.2777 - val_accuracy: 0.9062\n",
            "Epoch 40/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0438 - accuracy: 0.9937 - val_loss: 0.2743 - val_accuracy: 0.9000\n",
            "Epoch 41/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0415 - accuracy: 0.9969 - val_loss: 0.2798 - val_accuracy: 0.9000\n",
            "Epoch 42/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0396 - accuracy: 0.9969 - val_loss: 0.2879 - val_accuracy: 0.8938\n",
            "Epoch 43/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0378 - accuracy: 0.9969 - val_loss: 0.2895 - val_accuracy: 0.9062\n",
            "Epoch 44/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0360 - accuracy: 0.9984 - val_loss: 0.2855 - val_accuracy: 0.9125\n",
            "Epoch 45/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0347 - accuracy: 0.9984 - val_loss: 0.2904 - val_accuracy: 0.9062\n",
            "Epoch 46/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0332 - accuracy: 0.9984 - val_loss: 0.2907 - val_accuracy: 0.9125\n",
            "Epoch 47/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0317 - accuracy: 0.9969 - val_loss: 0.3022 - val_accuracy: 0.9062\n",
            "Epoch 48/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0301 - accuracy: 0.9984 - val_loss: 0.2934 - val_accuracy: 0.9062\n",
            "Epoch 49/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0288 - accuracy: 0.9984 - val_loss: 0.2955 - val_accuracy: 0.9062\n",
            "Epoch 50/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0277 - accuracy: 0.9984 - val_loss: 0.2964 - val_accuracy: 0.9062\n",
            "Test Accuracy: 0.9500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.datasets import make_classification\n",
        "\n",
        "# Generate a synthetic binary classification dataset\n",
        "X, y = make_classification(n_samples=1000, n_features=20, n_informative=15, n_redundant=5, n_classes=2, random_state=42)\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Standardize the features\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# Define the model\n",
        "model = Sequential([\n",
        "    Dense(32, input_dim=X_train.shape[1], activation='relu'),\n",
        "    Dense(16, activation='relu'),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2, verbose=1)\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test, y_test, verbose=0)\n",
        "print(f'Test Accuracy: {accuracy:.4f}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AA2L7K3X-pr",
        "outputId": "5e3d0f44-f133-46df-938a-ae0b836163f5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "20/20 [==============================] - 1s 15ms/step - loss: 0.6707 - accuracy: 0.5688 - val_loss: 0.6381 - val_accuracy: 0.6438\n",
            "Epoch 2/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.5961 - accuracy: 0.7172 - val_loss: 0.5799 - val_accuracy: 0.7312\n",
            "Epoch 3/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.5306 - accuracy: 0.7891 - val_loss: 0.5256 - val_accuracy: 0.7812\n",
            "Epoch 4/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4705 - accuracy: 0.8297 - val_loss: 0.4757 - val_accuracy: 0.8313\n",
            "Epoch 5/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.4140 - accuracy: 0.8547 - val_loss: 0.4344 - val_accuracy: 0.8438\n",
            "Epoch 6/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.3667 - accuracy: 0.8797 - val_loss: 0.4016 - val_accuracy: 0.8313\n",
            "Epoch 7/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.3262 - accuracy: 0.8906 - val_loss: 0.3763 - val_accuracy: 0.8375\n",
            "Epoch 8/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2943 - accuracy: 0.9000 - val_loss: 0.3572 - val_accuracy: 0.8500\n",
            "Epoch 9/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.2667 - accuracy: 0.9047 - val_loss: 0.3420 - val_accuracy: 0.8625\n",
            "Epoch 10/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2465 - accuracy: 0.9141 - val_loss: 0.3302 - val_accuracy: 0.8687\n",
            "Epoch 11/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.2282 - accuracy: 0.9203 - val_loss: 0.3160 - val_accuracy: 0.8750\n",
            "Epoch 12/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.2132 - accuracy: 0.9219 - val_loss: 0.3105 - val_accuracy: 0.8687\n",
            "Epoch 13/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.1999 - accuracy: 0.9297 - val_loss: 0.3009 - val_accuracy: 0.8625\n",
            "Epoch 14/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1876 - accuracy: 0.9375 - val_loss: 0.2938 - val_accuracy: 0.8687\n",
            "Epoch 15/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1766 - accuracy: 0.9438 - val_loss: 0.2828 - val_accuracy: 0.8562\n",
            "Epoch 16/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.1655 - accuracy: 0.9453 - val_loss: 0.2856 - val_accuracy: 0.8625\n",
            "Epoch 17/50\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.1559 - accuracy: 0.9594 - val_loss: 0.2802 - val_accuracy: 0.8687\n",
            "Epoch 18/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.1472 - accuracy: 0.9609 - val_loss: 0.2796 - val_accuracy: 0.8687\n",
            "Epoch 19/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.1391 - accuracy: 0.9578 - val_loss: 0.2696 - val_accuracy: 0.8687\n",
            "Epoch 20/50\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.1311 - accuracy: 0.9656 - val_loss: 0.2750 - val_accuracy: 0.8687\n",
            "Epoch 21/50\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.1234 - accuracy: 0.9656 - val_loss: 0.2645 - val_accuracy: 0.8687\n",
            "Epoch 22/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.1159 - accuracy: 0.9688 - val_loss: 0.2625 - val_accuracy: 0.8750\n",
            "Epoch 23/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.1091 - accuracy: 0.9703 - val_loss: 0.2648 - val_accuracy: 0.8750\n",
            "Epoch 24/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.1023 - accuracy: 0.9719 - val_loss: 0.2615 - val_accuracy: 0.8813\n",
            "Epoch 25/50\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.0969 - accuracy: 0.9781 - val_loss: 0.2590 - val_accuracy: 0.8875\n",
            "Epoch 26/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0916 - accuracy: 0.9812 - val_loss: 0.2543 - val_accuracy: 0.8813\n",
            "Epoch 27/50\n",
            "20/20 [==============================] - 0s 9ms/step - loss: 0.0865 - accuracy: 0.9812 - val_loss: 0.2633 - val_accuracy: 0.8813\n",
            "Epoch 28/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0818 - accuracy: 0.9828 - val_loss: 0.2590 - val_accuracy: 0.8875\n",
            "Epoch 29/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0786 - accuracy: 0.9812 - val_loss: 0.2480 - val_accuracy: 0.9000\n",
            "Epoch 30/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0745 - accuracy: 0.9844 - val_loss: 0.2622 - val_accuracy: 0.8813\n",
            "Epoch 31/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0708 - accuracy: 0.9859 - val_loss: 0.2592 - val_accuracy: 0.8813\n",
            "Epoch 32/50\n",
            "20/20 [==============================] - 0s 7ms/step - loss: 0.0682 - accuracy: 0.9859 - val_loss: 0.2501 - val_accuracy: 0.9000\n",
            "Epoch 33/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0638 - accuracy: 0.9875 - val_loss: 0.2640 - val_accuracy: 0.8875\n",
            "Epoch 34/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0605 - accuracy: 0.9891 - val_loss: 0.2549 - val_accuracy: 0.9062\n",
            "Epoch 35/50\n",
            "20/20 [==============================] - 0s 8ms/step - loss: 0.0571 - accuracy: 0.9891 - val_loss: 0.2537 - val_accuracy: 0.9062\n",
            "Epoch 36/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0541 - accuracy: 0.9891 - val_loss: 0.2561 - val_accuracy: 0.9062\n",
            "Epoch 37/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0514 - accuracy: 0.9937 - val_loss: 0.2572 - val_accuracy: 0.8938\n",
            "Epoch 38/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0488 - accuracy: 0.9937 - val_loss: 0.2605 - val_accuracy: 0.8875\n",
            "Epoch 39/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0458 - accuracy: 0.9937 - val_loss: 0.2550 - val_accuracy: 0.8938\n",
            "Epoch 40/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0435 - accuracy: 0.9937 - val_loss: 0.2586 - val_accuracy: 0.9000\n",
            "Epoch 41/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0407 - accuracy: 0.9953 - val_loss: 0.2589 - val_accuracy: 0.8938\n",
            "Epoch 42/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0390 - accuracy: 0.9953 - val_loss: 0.2601 - val_accuracy: 0.9000\n",
            "Epoch 43/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0366 - accuracy: 0.9953 - val_loss: 0.2622 - val_accuracy: 0.9062\n",
            "Epoch 44/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0344 - accuracy: 0.9953 - val_loss: 0.2634 - val_accuracy: 0.9000\n",
            "Epoch 45/50\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.0329 - accuracy: 0.9953 - val_loss: 0.2600 - val_accuracy: 0.9000\n",
            "Epoch 46/50\n",
            "20/20 [==============================] - 0s 3ms/step - loss: 0.0309 - accuracy: 0.9953 - val_loss: 0.2644 - val_accuracy: 0.8938\n",
            "Epoch 47/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0291 - accuracy: 0.9953 - val_loss: 0.2648 - val_accuracy: 0.9000\n",
            "Epoch 48/50\n",
            "20/20 [==============================] - 0s 6ms/step - loss: 0.0276 - accuracy: 0.9969 - val_loss: 0.2656 - val_accuracy: 0.9125\n",
            "Epoch 49/50\n",
            "20/20 [==============================] - 0s 5ms/step - loss: 0.0264 - accuracy: 0.9984 - val_loss: 0.2745 - val_accuracy: 0.9062\n",
            "Epoch 50/50\n",
            "20/20 [==============================] - 0s 4ms/step - loss: 0.0243 - accuracy: 0.9984 - val_loss: 0.2628 - val_accuracy: 0.9125\n",
            "Test Accuracy: 0.9350\n"
          ]
        }
      ]
    }
  ]
}